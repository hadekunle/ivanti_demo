name: manual_deploy
on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: "Terraform Command"
        required: true
        type: string
        default: apply
        options:
          - plan
          - apply
          - destroy
      lock_ID:
        description: "LockID of terraform state"
        required: false
        type: string
        default: ""
      unlock_state:
        description: "Unlock the Terraform state"
        required: true
        type: boolean
        default: false

permissions:
  id-token: write       # This is required for aws oidc connection
  contents: read        # This is required for actions/checkout
  pull-requests: write  # This is required for gh bot to comment PR

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Print All Inputs
        run: |
          echo "Terraform Action: ${{ inputs.terraform_action }}"
          echo "Unlock State:     ${{ inputs.unlock_state }}"

      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub-OIDC-TERRAFORM
          output-credentials: false

      - name: Verify AWS Credentials
        run: aws sts get-caller-identity
        continue-on-error: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10

      - name: Determine Environment
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "git_env=prod" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "test" ]]; then
            echo "git_env=test" >> $GITHUB_ENV
          else
            echo "git_env=dev" >> $GITHUB_ENV
          fi
        env:
          git_env: ${{ env.git_env }}

      - name: Terraform Init
        run: terraform init
        # env:
        #   AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        #   AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        # run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform select workspace
        run: terraform workspace select ${{ env.git_env }} || terraform workspace new  ${{ env.git_env }}

      - name: Unlock Terraform State
        if: ${{ inputs.unlock_state }}
        run: |
          # LOCK_ID=$(aws dynamodb scan --table-name github-action-lock-table --query "Items[].Info.S" --output text | grep -o '"ID":"[^"]*"' | cut -d':' -f2 | tr -d '"')

          # if [ -z "$LOCK_ID" ]; then
          #   echo "::error title=No Lock Found::No lock ID retrieved from the table."
          #   exit 1
          # else
          #   echo "Retrieved Lock ID: $LOCK_ID"
          #   terraform force-unlock -force $LOCK_ID
          # fi
        
          terraform force-unlock -force ${{ inputs.lock_ID }}

      - name: Terraform Plan
        if: ${{ inputs.terraform_action == 'plan' || inputs.terraform_action == 'apply' }}
        run: terraform plan
        # run: terraform plan -var-file="modules/common.tfvars" -var-file="modules/${{ env.git_env }}.tfvars"

      - name: Terraform ${{ inputs.terraform_action }}
        if: ${{ inputs.terraform_action == 'apply' || inputs.terraform_action == 'destroy' }}
        run: terraform ${{ inputs.terraform_action }} --auto-approve -input=false
        # run: terraform ${{ inputs.terraform_action }} -var-file="modules/common.tfvars" -var-file="modules/${{ env.git_env }}.tfvars" --auto-approve -input=false
